#!/usr/bin/env node

const glob = require("glob");
const minimist = require("minimist");
const chatdown = require("chatdown");
const chalk = require("chalk");
const path = require("path");
const fs = require("fs-extra");
const txt = require("read-text-file");

async function runProgram() {
    const args = minimist(process.argv.slice(2));
    args.inputDir = (args._.length > 0) ?  args._[0] : "**/*.chat";
    args.outputDir = (args._.length > 1) ?  args._[1] : "./";
    let files = glob.sync(args.inputDir, { "ignore": ["**/node_modules/**"] });
    for(let i = 0; i < files.length; i++) {
        try {
            let fileName = files[i];
            if(files[i].lastIndexOf("/") != -1) {
                fileName = files[i].substr(files[i].lastIndexOf("/"))
            }
            fileName = fileName.split(".")[0];
            let activities = await chatdown(txt.readSync(files[i]));
            let outputDir = (args.outputDir.substr(0, 2) === "./") ? path.resolve(process.cwd(), args.outputDir.substr(2)) : args.outputDir;
            let writeFile = `${outputDir}/${fileName}.transcript`;
            await fs.ensureFile(writeFile);
            await fs.writeJson(writeFile, activities, { spaces: 2 });
        }
        catch(e) {
            process.stderr.write(`${chalk.red(e)}\n`);
        }
    }
}

runProgram()
    .then(() => {
        process.stdout.write(chalk.green("Successfully wrote transcript files.\n"));
        process.exit(0);
    })
    .catch(e => {
        process.stderr.write(`${chalk.red(e)}\n`);
    });
